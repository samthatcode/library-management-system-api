## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Patrons Management'
description: |-

  APIs for managing library patrons and their book borrowing activities.

  These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

  Base URL: `/api/v1/patrons`
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/patrons
    metadata:
      groupName: 'Patrons Management'
      groupDescription: |-

        APIs for managing library patrons and their book borrowing activities.

        These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

        Base URL: `/api/v1/patrons`
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of all patrons with their borrowed books.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "name": "John Doe",
                "email": "john.doe@example.com",
                "phone": "+1234567890",
                "borrowed_books": [
                  {
                    "id": 1,
                    "title": "The Great Gatsby",
                    "borrowed_at": "2025-10-15T10:00:00Z"
                  }
                ],
                "created_at": "2025-10-18T12:00:00Z"
              }
            ]
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/patrons
    metadata:
      groupName: 'Patrons Management'
      groupDescription: |-

        APIs for managing library patrons and their book borrowing activities.

        These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

        Base URL: `/api/v1/patrons`
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created patron.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The full name of the patron.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the patron.'
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: 'The phone number of the patron.'
        required: true
        example: '+1234567890'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john.doe@example.com
      phone: '+1234567890'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "Patron created successfully",
            "data": {
              "id": 1,
              "name": "John Doe",
              "email": "john.doe@example.com",
              "phone": "+1234567890",
              "created_at": "2025-10-18T12:00:00Z"
            }
          }
        headers: []
        description: Created
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/patrons/{id}'
    metadata:
      groupName: 'Patrons Management'
      groupDescription: |-

        APIs for managing library patrons and their book borrowing activities.

        These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

        Base URL: `/api/v1/patrons`
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing patron.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the patron.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      patron:
        name: patron
        description: 'The ID of the patron to update.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      patron: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'optional The updated full name of the patron.'
        required: false
        example: 'Jane Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'optional The updated email address of the patron.'
        required: false
        example: jane.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: 'optional The updated phone number of the patron.'
        required: false
        example: '+1987654321'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Jane Doe'
      email: jane.doe@example.com
      phone: '+1987654321'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Patron updated successfully",
            "data": {
              "id": 1,
              "name": "Jane Doe",
              "email": "jane.doe@example.com",
              "phone": "+1987654321",
              "updated_at": "2025-10-18T15:00:00Z"
            }
          }
        headers: []
        description: Updated
        custom: []
      -
        status: 404
        content: '{"error": "Patron not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/patrons/{id}'
    metadata:
      groupName: 'Patrons Management'
      groupDescription: |-

        APIs for managing library patrons and their book borrowing activities.

        These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

        Base URL: `/api/v1/patrons`
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a patron.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the patron to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Patron deleted successfully",
            "data": null
          }
        headers: []
        description: Deleted
        custom: []
      -
        status: 400
        content: '{"error": "Patron has borrowed books and cannot be deleted"}'
        headers: []
        description: 'Bad Request'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/patrons/{patronId}/books/{bookId}/borrow'
    metadata:
      groupName: 'Patrons Management'
      groupDescription: |-

        APIs for managing library patrons and their book borrowing activities.

        These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

        Base URL: `/api/v1/patrons`
      subgroup: ''
      subgroupDescription: ''
      title: 'Borrow a book for a patron.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      patronId:
        name: patronId
        description: 'The ID of the patron borrowing the book.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      bookId:
        name: bookId
        description: 'The ID of the book to be borrowed.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      patronId: 1
      bookId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Book borrowed successfully"}'
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: '{"error": "Book is already borrowed"}'
        headers: []
        description: 'Book Already Borrowed'
        custom: []
      -
        status: 404
        content: '{"error": "Patron not found"}'
        headers: []
        description: 'Patron Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/patrons/{patronId}/books/{bookId}/return'
    metadata:
      groupName: 'Patrons Management'
      groupDescription: |-

        APIs for managing library patrons and their book borrowing activities.

        These endpoints handle CRUD operations for patrons and book borrowing/returning functionality.

        Base URL: `/api/v1/patrons`
      subgroup: ''
      subgroupDescription: ''
      title: 'Return a borrowed book from a patron.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      patronId:
        name: patronId
        description: 'The ID of the patron returning the book.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      bookId:
        name: bookId
        description: 'The ID of the book to be returned.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      patronId: 1
      bookId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Book returned successfully",
            "data": {
              "id": 5,
              "title": "The Great Gatsby",
              "patron_id": null,
              "returned_at": "2025-10-18T16:00:00Z"
            }
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
