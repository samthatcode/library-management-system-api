## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Books Management'
description: |-

  APIs for managing and retrieving books within the library system.

  These endpoints handle CRUD operations and search functionality for books.

  Base URL: `/api/v1/books`
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/books
    metadata:
      groupName: 'Books Management'
      groupDescription: |-

        APIs for managing and retrieving books within the library system.

        These endpoints handle CRUD operations and search functionality for books.

        Base URL: `/api/v1/books`
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of all available books.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "title": "The Great Gatsby",
                "description": "A classic American novel",
                "isbn": "9780743273565",
                "publication_date": "1925-04-10",
                "authors": [
                  {
                    "id": 1,
                    "name": "F. Scott Fitzgerald"
                  }
                ],
                "created_at": "2025-10-18T12:00:00Z"
              }
            ]
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/books
    metadata:
      groupName: 'Books Management'
      groupDescription: |-

        APIs for managing and retrieving books within the library system.

        These endpoints handle CRUD operations and search functionality for books.

        Base URL: `/api/v1/books`
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created book.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the book.'
        required: true
        example: 'The Great Gatsby'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'A description of the book.'
        required: true
        example: 'A classic American novel set in the Jazz Age'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      isbn:
        name: isbn
        description: 'The ISBN number of the book.'
        required: true
        example: '9780743273565'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      publication_date:
        name: publication_date
        description: 'The publication date of the book.'
        required: true
        example: '1925-04-10'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      authors:
        name: authors
        description: 'Array of author IDs associated with the book.'
        required: true
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'authors.*':
        name: 'authors.*'
        description: 'Each author ID must exist in the authors table.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'The Great Gatsby'
      description: 'A classic American novel set in the Jazz Age'
      isbn: '9780743273565'
      publication_date: '1925-04-10'
      authors:
        - 1
        - 2
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "data": {
              "id": 1,
              "title": "The Great Gatsby",
              "description": "A classic American novel",
              "isbn": "9780743273565",
              "publication_date": "1925-04-10",
              "authors": [
                {
                  "id": 1,
                  "name": "F. Scott Fitzgerald"
                }
              ],
              "created_at": "2025-10-18T12:00:00Z"
            }
          }
        headers: []
        description: Created
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/books/{id}'
    metadata:
      groupName: 'Books Management'
      groupDescription: |-

        APIs for managing and retrieving books within the library system.

        These endpoints handle CRUD operations and search functionality for books.

        Base URL: `/api/v1/books`
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing book.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the book.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      book:
        name: book
        description: 'The ID of the book to update.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      book: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'optional The updated title of the book.'
        required: false
        example: 'The Great Gatsby (Revised Edition)'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'optional Updated description of the book.'
        required: false
        example: 'Eius et animi quos velit et.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      isbn:
        name: isbn
        description: 'optional Updated ISBN number.'
        required: false
        example: architecto
        type: numeric
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      publication_date:
        name: publication_date
        description: 'optional Updated publication date.'
        required: false
        example: architecto
        type: date
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      authors:
        name: authors
        description: 'optional Updated array of author IDs.'
        required: false
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'authors.*':
        name: 'authors.*'
        description: 'optional Each author ID must exist in the authors table.'
        required: false
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'The Great Gatsby (Revised Edition)'
      description: 'Eius et animi quos velit et.'
      isbn: architecto
      publication_date: architecto
      authors:
        - architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "id": 1,
              "title": "The Great Gatsby (Revised Edition)",
              "description": "A classic American novel",
              "isbn": "9780743273565",
              "publication_date": "1925-04-10",
              "authors": [
                {
                  "id": 1,
                  "name": "F. Scott Fitzgerald"
                }
              ],
              "updated_at": "2025-10-18T15:00:00Z"
            }
          }
        headers: []
        description: Updated
        custom: []
      -
        status: 404
        content: '{"error": "Book not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/books/{id}'
    metadata:
      groupName: 'Books Management'
      groupDescription: |-

        APIs for managing and retrieving books within the library system.

        These endpoints handle CRUD operations and search functionality for books.

        Base URL: `/api/v1/books`
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a book.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the book.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      book:
        name: book
        description: 'The ID of the book to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      book: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Book deleted successfully"}'
        headers: []
        description: Deleted
        custom: []
      -
        status: 400
        content: '{"error": "Book is currently borrowed and cannot be deleted"}'
        headers: []
        description: 'Book is borrowed'
        custom: []
      -
        status: 404
        content: '{"error": "Book not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/books/search
    metadata:
      groupName: 'Books Management'
      groupDescription: |-

        APIs for managing and retrieving books within the library system.

        These endpoints handle CRUD operations and search functionality for books.

        Base URL: `/api/v1/books`
      subgroup: ''
      subgroupDescription: ''
      title: 'Search for books by title and author.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      title:
        name: title
        description: 'optional The title of the book to search for.'
        required: false
        example: Gatsby
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      authors:
        name: authors
        description: 'optional Array of author IDs to filter by.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      title: Gatsby
      authors:
        - 1
        - 2
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "books": [
              {
                "id": 1,
                "title": "The Great Gatsby",
                "description": "A classic American novel",
                "isbn": "9780743273565",
                "publication_date": "1925-04-10",
                "authors": [
                  {
                    "id": 1,
                    "name": "F. Scott Fitzgerald"
                  }
                ]
              }
            ]
          }
        headers: []
        description: Success
        custom: []
      -
        status: 404
        content: '{"error": "No books found for the specified title and author"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/authors/{author_id}/books'
    metadata:
      groupName: 'Books Management'
      groupDescription: |-

        APIs for managing and retrieving books within the library system.

        These endpoints handle CRUD operations and search functionality for books.

        Base URL: `/api/v1/books`
      subgroup: ''
      subgroupDescription: ''
      title: 'Fetch all books by a particular author.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      author:
        name: author
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      author_id: 1
      author: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "title": "The Great Gatsby",
                "description": "A classic American novel",
                "isbn": "9780743273565",
                "publication_date": "1925-04-10",
                "authors": [
                  {
                    "id": 1,
                    "name": "F. Scott Fitzgerald"
                  }
                ]
              }
            ]
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
